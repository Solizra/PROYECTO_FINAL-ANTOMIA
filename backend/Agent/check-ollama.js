#!/usr/bin/env node

import { execSync } from 'child_process';
import { Ollama } from "@llamaindex/ollama";

console.log('üîç VERIFICACI√ìN DE OLLAMA');
console.log('=========================\n');

// Funci√≥n para verificar si Ollama est√° ejecut√°ndose
async function verificarOllamaEjecutandose() {
  try {
    console.log('üîç Verificando si Ollama est√° ejecut√°ndose...');
    
    // Intentar hacer una petici√≥n simple a Ollama
    const ollama = new Ollama({
      model: "qwen3:1.7b",
      temperature: 0.1,
      timeout: 10000, // 10 segundos para la prueba
    });

    const respuesta = await ollama.complete({
      prompt: "Responde solo con 'OK'",
    });

    console.log('‚úÖ Ollama est√° ejecut√°ndose correctamente');
    return true;
  } catch (error) {
    console.log('‚ùå Ollama no est√° ejecut√°ndose o no responde');
    console.log('üí° Ejecuta: ollama serve');
    return false;
  }
}

// Funci√≥n para verificar modelos disponibles
function verificarModelos() {
  try {
    console.log('üîç Verificando modelos disponibles...');
    
    const output = execSync('ollama list', { encoding: 'utf8' });
    console.log('üìã Modelos disponibles:');
    console.log(output);
    
    if (output.includes('qwen3:1.7b')) {
      console.log('‚úÖ Modelo qwen3:1.7b encontrado');
      return true;
    } else {
      console.log('‚ö†Ô∏è  Modelo qwen3:1.7b no encontrado');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Error verificando modelos:', error.message);
    return false;
  }
}

// Funci√≥n para descargar el modelo si no est√°
async function descargarModelo() {
  try {
    console.log('üì• Descargando modelo qwen3:1.7b...');
    console.log('‚è≥ Esto puede tomar varios minutos...');
    
    execSync('ollama pull qwen3:1.7b', { stdio: 'inherit' });
    
    console.log('‚úÖ Modelo descargado exitosamente');
    return true;
  } catch (error) {
    console.log('‚ùå Error descargando modelo:', error.message);
    return false;
  }
}

// Funci√≥n para probar el modelo
async function probarModelo() {
  try {
    console.log('üß™ Probando el modelo...');
    
    const ollama = new Ollama({
      model: "qwen3:1.7b",
      temperature: 0.1,
      timeout: 30000, // 30 segundos para la prueba
    });

    const respuesta = await ollama.complete({
      prompt: "Responde √∫nicamente con 'S√ç' o 'NO': ¬øEs el sol una estrella?",
    });

    console.log('‚úÖ Modelo responde correctamente');
    console.log(`üß† Respuesta de prueba: "${respuesta}"`);
    return true;
  } catch (error) {
    console.log('‚ùå Error probando modelo:', error.message);
    return false;
  }
}

// Funci√≥n principal
async function verificarOllama() {
  console.log('üöÄ Iniciando verificaci√≥n completa de Ollama...\n');

  // Verificar si Ollama est√° ejecut√°ndose
  const ollamaEjecutandose = await verificarOllamaEjecutandose();
  
  if (!ollamaEjecutandose) {
    console.log('\n‚ùå Ollama no est√° ejecut√°ndose');
    console.log('üí° Soluciones:');
    console.log('1. Ejecuta: ollama serve');
    console.log('2. Verifica que Ollama est√© instalado');
    console.log('3. Reinicia el servicio si es necesario');
    return;
  }

  // Verificar modelos
  const modeloDisponible = verificarModelos();
  
  if (!modeloDisponible) {
    console.log('\nüì• Descargando modelo...');
    const descargaExitosa = await descargarModelo();
    
    if (!descargaExitosa) {
      console.log('‚ùå No se pudo descargar el modelo');
      return;
    }
  }

  // Probar el modelo
  console.log('\nüß™ Probando funcionalidad...');
  const pruebaExitosa = await probarModelo();
  
  if (!pruebaExitosa) {
    console.log('‚ùå El modelo no responde correctamente');
    console.log('üí° Intenta reiniciar Ollama: ollama serve');
    return;
  }

  console.log('\nüéâ VERIFICACI√ìN COMPLETADA');
  console.log('==========================');
  console.log('‚úÖ Ollama est√° funcionando correctamente');
  console.log('‚úÖ Modelo qwen3:1.7b est√° disponible');
  console.log('‚úÖ El modelo responde correctamente');
  console.log('\nüí° Ahora puedes ejecutar el agente: npm start');
}

// Ejecutar verificaci√≥n
verificarOllama().catch(console.error);
