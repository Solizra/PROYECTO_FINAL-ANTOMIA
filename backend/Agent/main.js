import { tool, agent } from "llamaindex";
import { Ollama } from "@llamaindex/ollama";
import { z } from "zod";
import { empezarChat } from './cli-chat.js'
import https from 'https';

//import {Bdd} from '../../data/Bdd.js'
//revisar la conexion con base de datos y porque no aparece la respuesta de que si hay algun newsletter relacionado  


// Configuraci√≥n
const DEBUG = false;


// Instancia de la clase Estudiantes
//const estudiantes = new Estudiantes();
//estudiantes.cargarEstudiantesDesdeJson();


// System prompt b√°sico
const systemPrompt = `
Sos un asistente que analiza noticias para detectar si est√°n relacionadas con Climatech.
Climatech incluye tecnolog√≠as que ayudan a combatir el cambio clim√°tico, como energ√≠as renovables, eficiencia energ√©tica, captura de carbono, movilidad sostenible, etc. Pero tambi√©n son relevantes noticias sobre estos temas sin tecnolog√≠as incluidas.


Tu tarea es:
- Leer la noticia que se encuentra en el texto o el link proporcionado.
- Determinar si el contenido tiene relaci√≥n con Climatech.
- Respond√© solo con "S√≠" o "No". Si la respuesta es "S√≠" genera un breve resmen de la noticia. Si la respuesta es "No" dec√≠ cual es el tema principal de la noticia.
- Si es Climatech, comparo los resumenes de la base de dsatos sobre los newsletetr almacenados. Si las tematicas coinciden con la noticia ingresada, devolves los titulos de los newsletter de la base de datos que se relacionan con la noticia relacionada

IMPORTANTE: siempre que el usuario pegue un link o texto, us√° las herramientas disponibles (evaluarNoticiaClimatech y extraerTextoDeNoticia) para procesarlo. No respondas por tu cuenta sin usar una tool.
‚ö†Ô∏è No respondas directamente si una noticia es o no Climatech. Us√° obligatoriamente la herramienta llamada "evaluarNoticiaClimatech" para hacer ese an√°lisis.


`.trim();


const ollamaLLM = new Ollama({
  model: "qwen3:1.7b",
  temperature: 0.75,
    timeout: 4 * 60 * 1000, // Timeout de 4 minutos
});




// TODO: Implementar la Tool para buscar por nombre
import fetch from 'node-fetch';
import * as cheerio from 'cheerio';

const httpsAgent = new https.Agent({ rejectUnauthorized: false });

// Extrae string de la respuesta del LLM sin importar la forma
function getLLMText(completion) {
  let text = "";
  if (typeof completion === "string") {
    text = completion;
  } else if (completion && typeof completion === "object") {
    if (typeof completion.completion === "string") text = completion.completion;
    else if (typeof completion.text === "string") text = completion.text;
    else if (typeof completion.output === "string") text = completion.output;
    else if (typeof completion.message === "string") text = completion.message;
    else if (Array.isArray(completion.output) && completion.output.length > 0) text = String(completion.output[0]);
  }
  return String(text || "").trim();
}

function normalizarTitulo(titulo) {
  return String(titulo || "")
    .toLowerCase()
    .replace(/‚Ä¶/g, "") // elimina puntos suspensivos unicode
    .replace(/\.\.\./g, "") // elimina tres puntos
    .replace(/[#¬ø?!"¬°]/g, "") // elimina signos raros
    .replace(/\s+/g, " ") // colapsa espacios
    .trim();
}

async function buscarNewslettersRelacionados(resumenNoticia) {
  console.log("Buscando newsletters relacionados para resumen:", resumenNoticia);
  // 1. Traer los newsletters desde tu backend Express
  const response = await fetch('http://localhost:3000/api/Newsletter');
  const newsletters = await response.json();

  console.log("Los newsletters que voy a comparar son:");
  console.log(JSON.stringify(newsletters, null, 2));

  // 2. Armar el prompt para el modelo LLM
  const prompt = `
Tengo un resumen de una noticia sobre Climatech:
"${resumenNoticia}"

Y una lista de newsletters con su t√≠tulo y resumen:
${newsletters.map(n => `- T√≠tulo: "${n.titulo}", Resumen: ${n.Resumen}`).join('\n')}

Compar√° el resumen de la noticia con los res√∫menes de los newsletters.
Si alguno trata una tem√°tica similar, respond√© solo con una lista de los **t√≠tulos exactos** de los newsletters relacionados, uno por l√≠nea.
No agregues explicaciones, solo los t√≠tulos.
`;

  // 3. Consultar al modelo
  const completion = await ollamaLLM.complete({
    prompt,
    temperature: 0,
  });
  console.log("DEBUG completion:", completion);

  const respuesta = getLLMText(completion);
  console.log("üß† Texto generado por el modelo:\n", respuesta);

  // 4. Procesar respuesta del modelo
  const relacionados = [];
  const idsAgregados = new Set();

  const lineas = respuesta
    .split('\n')
    .map(linea => linea.trim())
    .filter(Boolean);

  lineas.forEach(tituloRespuesta => {
    const tituloNorm = normalizarTitulo(tituloRespuesta);

    const newsletter = newsletters.find(n =>
      normalizarTitulo(n.titulo) === tituloNorm ||
      normalizarTitulo(n.titulo).includes(tituloNorm) ||
      tituloNorm.includes(normalizarTitulo(n.titulo))
    );
    if (newsletter && !idsAgregados.has(newsletter.id)) {
      relacionados.push({
        id: newsletter.id,
        link: newsletter.link,
        titulo: newsletter.titulo,
        resumen: newsletter.Resumen,
      });
      idsAgregados.add(newsletter.id);
    }
  });

  return relacionados;
}


const extraerTextoDeNoticiaTool = tool({
  name: "extraerTextoDeNoticia",
  description: "Extrae el contenido principal de una noticia desde un link, incluyendo el t√≠tulo y el texto (m√°ximo 3000 caracteres).",
  parameters: z.object({
    url: z.string().describe("El link de la noticia"),
  }),
  execute: async ({ url }) => {
    try {
      const res = await fetch(url, { agent: httpsAgent });
      if (!res.ok) throw new Error(`Error al descargar la p√°gina: ${res.statusText}`);

      const html = await res.text();
      const $ = cheerio.load(html);

      // T√≠tulo de la noticia
      const titulo = $('title').text().trim() || 'Sin t√≠tulo';

      // Extraer p√°rrafos significativos
      const parrafos = $('p')
        .map((_, el) => $(el).text().trim())
        .get()
        .filter(texto => texto.length > 30);

      if (parrafos.length === 0) throw new Error('No se pudo extraer texto √∫til');

      const texto = parrafos.join('\n').slice(0, 3000);

      return {
        titulo,
        texto,
        url,
      };
    } catch (e) {
      console.error('Error en extraerTextoDeNoticiaTool:', e.message);

      return {
        titulo: 'No se pudo extraer el t√≠tulo',
        texto: 'No se pudo extraer el contenido de la noticia.',
        url,
      };
    }
  },
});





const evaluarNoticiaTool = tool({
  name: "evaluarNoticiaClimatech",
  description: "Eval√∫a si el texto de una noticia est√° relacionado con Climatech y busca newsletters relacionados",
  parameters: z.object({
    texto: z.string().describe("El contenido textual de la noticia"),
    url: z.string().optional().describe("URL de la noticia para buscar newsletters"),
  }),
  execute: async ({ texto }) => {
    console.log("üîç evaluarNoticiaTool.execute se llam√≥");

    // Paso 1: Evaluar si el texto trata sobre Climatech
    const evaluacionRaw = await ollamaLLM.complete({
      prompt: `${systemPrompt}\n\nNoticia:\n${texto}\n\n¬øEst√° relacionada con Climatech?`,
    });

    console.log("üß† Evaluaci√≥n cruda del modelo:", evaluacionRaw);

    const evaluacion = getLLMText(evaluacionRaw).toLowerCase();
    const esClimatech =
      evaluacion.startsWith("s√≠") ||
      evaluacion.includes("‚úÖ es una noticia sobre climatech") ||
      evaluacion.includes("s√≠.") ||
      evaluacion.includes("s√≠,");

    if (esClimatech) {
      // Paso 2: Generar resumen de la noticia
      const resumenRaw = await ollamaLLM.complete({
        prompt: `Le√© el siguiente texto de una noticia y escrib√≠ un resumen claro en no m√°s de 5 l√≠neas:\n\n${texto}`,
      });
      const resumen = getLLMText(resumenRaw);

      console.log("üìù Resumen generado:", resumen);

      // Paso 3: Buscar newsletters relacionados
      console.log("üì• Antes de buscar newsletters relacionados");
      const newslettersRelacionados = await buscarNewslettersRelacionados(resumen);
      console.log("üì§ Despu√©s de buscar newsletters relacionados");

      if (newslettersRelacionados.length > 0) {
        const titulos = newslettersRelacionados.map(nl => `- ${nl.titulo}`).join('\n');
        return `‚úÖ Es una noticia sobre Climatech.\n\nüìù Resumen:\n${resumen}\n\nüìß Newsletters relacionados:\n${titulos}`;
      } else {
        return `‚úÖ Es una noticia sobre Climatech.\n\nüìù Resumen:\n${resumen}\n\n‚ö†Ô∏è No hay ning√∫n newsletter con su misma tem√°tica.`;
      }
    } else {
      // Paso 4: Si no es Climatech, indicar el tema principal
      const temaPrincipalRaw = await ollamaLLM.complete({
        prompt: `Le√© el siguiente texto de una noticia y dec√≠ cu√°l es su tema principal:\n\n${texto}`
      });
      const temaPrincipal = getLLMText(temaPrincipalRaw);

      return `‚ùå No es una noticia sobre Climatech. Tema principal: ${temaPrincipal}`;
    }
  },
});



     
 


// Configuraci√≥n del agente
const elagente = agent({
    tools: [extraerTextoDeNoticiaTool, evaluarNoticiaTool],
    llm: ollamaLLM,
    verbose: DEBUG,
    systemPrompt: systemPrompt,
});


// Mensaje de bienvenida
const mensajeBienvenida = `
üå± Soy un asistente que analiza noticias.
Peg√° el link de una noticia y te digo si trata sobre Climatech o no.
Escrib√≠ 'exit' para salir.
`;


// Iniciar el chat
empezarChat(elagente, mensajeBienvenida);

// -------------------
// TEST: Ejecutar b√∫squeda de newsletters manualmente
// -------------------

/*
(async () => {
  const resumenDePrueba = `
    El podcast examina el agua como desaf√≠o clim√°tico y recurso estrat√©gico, destacando su importancia en el contexto internacional, los impactos del cambio clim√°tico, y su rol en la transici√≥n energ√©tica.
    Se mencionan temas como la gesti√≥n h√≠drica, el acceso a servicios h√≠dricos y la pol√≠tica internacional.
  `;

  console.log("üß™ Ejecutando test con resumen de prueba:");
  const relacionados = await buscarNewslettersRelacionados(resumenDePrueba);

  console.log("‚úÖ Resultado de buscarNewslettersRelacionados:");
  console.dir(relacionados, { depth: null });
})();
*/


