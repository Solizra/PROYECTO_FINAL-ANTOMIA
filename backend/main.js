import https from 'https';
import fetch from 'node-fetch';
import * as cheerio from 'cheerio';
import readline from 'readline';
import { fileURLToPath } from 'url';

// Configuraci√≥n
const DEBUG = false;

const httpsAgent = new https.Agent({ rejectUnauthorized: false });

// Palabras clave para detectar Climatech
const CLIMATECH_KEYWORDS = [
  // Energ√≠as renovables
  'solar', 'e√≥lica', 'hidroel√©ctrica', 'renovable', 'energ√≠a limpia', 'paneles solares',
  'turbinas e√≥licas', 'energ√≠a verde', 'sostenible', 'sustentable',
  
  // Eficiencia energ√©tica
  'eficiencia energ√©tica', 'ahorro energ√©tico', 'consumo energ√©tico', 'optimizaci√≥n',
  'edificios verdes', 'certificaci√≥n energ√©tica',
  
  // Captura de carbono
  'carbono', 'CO2', 'emisiones', 'captura', 'secuestro', 'neutralidad',
  'huella de carbono', 'compensaci√≥n', 'reducci√≥n emisiones',
  
  // Movilidad sostenible
  'veh√≠culo el√©ctrico', 'coche el√©ctrico', 'transporte p√∫blico', 'bicicleta',
  'movilidad sostenible', 'transporte limpio', 'autob√∫s el√©ctrico',
  
  // Agricultura sostenible
  'agricultura sostenible', 'agricultura org√°nica', 'permacultura',
  'agricultura regenerativa', 'cultivo org√°nico',
  
  // Tecnolog√≠as ambientales
  'monitoreo ambiental', 'sensores', 'IoT ambiental', 'tecnolog√≠a verde',
  'innovaci√≥n ambiental', 'tech clim√°tico',
  
  // Pol√≠ticas clim√°ticas
  'cambio clim√°tico', 'pol√≠tica clim√°tica', 'acuerdo de par√≠s', 'COP',
  'regulaci√≥n ambiental', 'normativa verde', 'impuestos verdes',
  
  // Materiales sostenibles
  'materiales sostenibles', 'biodegradable', 'reciclable', 'econom√≠a circular',
  'reutilizaci√≥n', 'sostenibilidad', 'materiales verdes',
  
  // T√©rminos generales
  'clima', 'medio ambiente', 'sostenibilidad', 'verde', 'ecol√≥gico',
  'ambiental', 'sustentable', 'climatech', 'cleantech'
];

// Funci√≥n para extraer contenido de noticias desde URLs
async function extraerContenidoNoticia(url) {
  try {
    console.log(`üîó Extrayendo contenido de: ${url}`);
    
    const res = await fetch(url, { agent: httpsAgent });
    if (!res.ok) throw new Error(`Error HTTP: ${res.status} ${res.statusText}`);

    const html = await res.text();
    const $ = cheerio.load(html);

    // Extraer t√≠tulo
    let titulo = $('title').text().trim() || 
                 $('h1').first().text().trim() || 
                 $('meta[property="og:title"]').attr('content') || 
                 'Sin t√≠tulo';

    // Extraer contenido principal
    const parrafos = $('p, article, .content, .article-content, .post-content')
      .map((_, el) => $(el).text().trim())
      .get()
      .filter(texto => texto.length > 20 && !texto.includes('cookie') && !texto.includes('privacy'));

    if (parrafos.length === 0) {
      throw new Error('No se pudo extraer contenido √∫til de la p√°gina');
    }

    const contenido = parrafos.join('\n').slice(0, 3000);
    
    console.log(`‚úÖ Contenido extra√≠do: ${contenido.length} caracteres`);
    
    return {
      titulo: titulo,
      contenido: contenido,
      url: url
    };
  } catch (error) {
    console.error(`‚ùå Error extrayendo contenido: ${error.message}`);
    return {
      titulo: 'Error al extraer t√≠tulo',
      contenido: 'No se pudo extraer el contenido de la noticia.',
      url: url
    };
  }
}

// Funci√≥n para generar resumen usando an√°lisis de texto local
function generarResumenLocal(contenido) {
  try {
    console.log(`üìù Generando resumen local...`);
    
    // Dividir en oraciones
    const oraciones = contenido.split(/[.!?]+/).filter(s => s.trim().length > 10);
    
    // Seleccionar las primeras 3 oraciones m√°s relevantes
    const resumen = oraciones.slice(0, 3).join('. ').trim();
    
    console.log(`‚úÖ Resumen generado: ${resumen.length} caracteres`);
    
    return resumen + '.';
  } catch (error) {
    console.error(`‚ùå Error generando resumen: ${error.message}`);
    return 'No se pudo generar el resumen.';
  }
}

// Funci√≥n para determinar si es Climatech usando an√°lisis de palabras clave
function determinarSiEsClimatechLocal(contenido) {
  try {
    console.log(`üîç Evaluando si es Climatech (an√°lisis local)...`);
    
    const contenidoLower = contenido.toLowerCase();
    let puntuacion = 0;
    const palabrasEncontradas = [];
    
    // Contar coincidencias de palabras clave
    CLIMATECH_KEYWORDS.forEach(keyword => {
      if (contenidoLower.includes(keyword.toLowerCase())) {
        puntuacion += 1;
        palabrasEncontradas.push(keyword);
      }
    });
    
    // Calcular densidad de palabras clave
    const densidad = puntuacion / (contenido.split(' ').length / 100); // palabras por 100
    
    const esClimatech = puntuacion >= 3 || densidad >= 2; // Al menos 3 palabras clave o densidad alta
    
    console.log(`‚úÖ Evaluaci√≥n local: ${esClimatech ? 'S√ç es Climatech' : 'NO es Climatech'}`);
    console.log(`üìä Puntuaci√≥n: ${puntuacion} palabras clave encontradas`);
    console.log(`üîç Palabras encontradas: ${palabrasEncontradas.join(', ')}`);
    
    return esClimatech;
  } catch (error) {
    console.error(`‚ùå Error evaluando Climatech: ${error.message}`);
    return false;
  }
}

// Funci√≥n para obtener newsletters de la base de datos
async function obtenerNewslettersBDD() {
  try {
    console.log(`üì• Obteniendo newsletters de la base de datos...`);
    
    const response = await fetch('http://localhost:3000/api/Newsletter');
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status} ${response.statusText}`);
    }
    
    const newsletters = await response.json();
    console.log(`‚úÖ Se obtuvieron ${newsletters.length} newsletters de la BDD`);
    
    return newsletters;
  } catch (error) {
    console.error(`‚ùå Error obteniendo newsletters: ${error.message}`);
    return [];
  }
}

// Funci√≥n para comparar noticia con newsletters usando similitud de texto
function compararConNewslettersLocal(resumenNoticia, newsletters) {
  try {
    console.log(`üîç Comparando noticia con ${newsletters.length} newsletters (an√°lisis local)...`);
    
    if (newsletters.length === 0) {
      console.log(`‚ö†Ô∏è No hay newsletters en la base de datos para comparar`);
      return [];
    }

    const resumenLower = resumenNoticia.toLowerCase();
    const newslettersRelacionados = [];
    
    newsletters.forEach((newsletter, index) => {
      let puntuacion = 0;
      const tituloLower = newsletter.titulo.toLowerCase();
      const resumenNewsletter = (newsletter.Resumen || '').toLowerCase();
      
      // Comparar palabras clave entre el resumen de la noticia y el newsletter
      CLIMATECH_KEYWORDS.forEach(keyword => {
        const keywordLower = keyword.toLowerCase();
        if (resumenLower.includes(keywordLower) && 
            (tituloLower.includes(keywordLower) || resumenNewsletter.includes(keywordLower))) {
          puntuacion += 2; // Coincidencia doble
        } else if (resumenLower.includes(keywordLower) || 
                   tituloLower.includes(keywordLower) || 
                   resumenNewsletter.includes(keywordLower)) {
          puntuacion += 1; // Coincidencia simple
        }
      });
      
      // Si hay al menos 2 coincidencias, considerar relacionado
      if (puntuacion >= 2) {
        newslettersRelacionados.push({
          ...newsletter,
          puntuacion: puntuacion
        });
      }
    });
    
    // Ordenar por puntuaci√≥n y tomar los mejores
    newslettersRelacionados.sort((a, b) => b.puntuacion - a.puntuacion);
    
    console.log(`‚úÖ Se encontraron ${newslettersRelacionados.length} newsletters relacionados`);
    
    return newslettersRelacionados.slice(0, 5); // M√°ximo 5 resultados
  } catch (error) {
    console.error(`‚ùå Error comparando newsletters: ${error.message}`);
    return [];
  }
}

// Funci√≥n para determinar tema principal usando an√°lisis de texto
function determinarTemaPrincipalLocal(contenido) {
  try {
    console.log(`üìã Determinando tema principal (an√°lisis local)...`);
    
    const contenidoLower = contenido.toLowerCase();
    const temas = {
      'tecnolog√≠a': ['tecnolog√≠a', 'tech', 'innovaci√≥n', 'startup', 'app', 'software', 'digital'],
      'deportes': ['f√∫tbol', 'futbol', 'deportes', 'liga', 'equipo', 'jugador', 'partido', 'gol'],
      'pol√≠tica': ['gobierno', 'pol√≠tica', 'elecciones', 'presidente', 'ministro', 'congreso', 'ley'],
      'econom√≠a': ['econom√≠a', 'mercado', 'inversi√≥n', 'bolsa', 'empresa', 'finanzas', 'd√≥lar'],
      'entretenimiento': ['pel√≠cula', 'pelicula', 'm√∫sica', 'musica', 'actor', 'actriz', 'cine', 'teatro'],
      'salud': ['salud', 'm√©dico', 'medico', 'hospital', 'enfermedad', 'tratamiento', 'vacuna'],
      'educaci√≥n': ['educaci√≥n', 'educacion', 'universidad', 'escuela', 'estudiante', 'profesor', 'acad√©mico']
    };
    
    let mejorTema = 'general';
    let mejorPuntuacion = 0;
    
    Object.entries(temas).forEach(([tema, palabras]) => {
      let puntuacion = 0;
      palabras.forEach(palabra => {
        if (contenidoLower.includes(palabra)) {
          puntuacion += 1;
        }
      });
      
      if (puntuacion > mejorPuntuacion) {
        mejorPuntuacion = puntuacion;
        mejorTema = tema;
      }
    });
    
    console.log(`‚úÖ Tema principal detectado: ${mejorTema}`);
    return mejorTema;
  } catch (error) {
    console.error(`‚ùå Error determinando tema: ${error.message}`);
    return 'general';
  }
}

// Funci√≥n principal para analizar noticias (devuelve mensaje para CLI)
async function analizarNoticia(input) {
  console.log(`üöÄ Iniciando an√°lisis completo de noticia (versi√≥n sin LLM)...`);
  
  try {
    let contenido, titulo;
    
    // PASO 1: Extraer contenido desde URL o usar texto directo
    if (input.startsWith('http')) {
      const resultadoExtraccion = await extraerContenidoNoticia(input);
      contenido = resultadoExtraccion.contenido;
      titulo = resultadoExtraccion.titulo;
    } else {
      contenido = input;
      titulo = 'Texto proporcionado';
    }

    // PASO 2: Generar resumen
    const resumen = generarResumenLocal(contenido);

    // PASO 3: Determinar si es Climatech
    const esClimatech = determinarSiEsClimatechLocal(contenido);

    if (!esClimatech) {
      // PASO 3.1: Si no es Climatech, informar tema principal
      const temaPrincipal = determinarTemaPrincipalLocal(contenido);

      return `‚ùå Esta noticia NO est√° relacionada con Climatech.

üì∞ T√≠tulo: ${titulo}
üìã Tema principal: ${temaPrincipal}

üí° Tip: Las noticias sobre Climatech incluyen energ√≠as renovables, eficiencia energ√©tica, captura de carbono, movilidad sostenible, agricultura sostenible, tecnolog√≠as ambientales, pol√≠ticas clim√°ticas, etc.`;
    }

    // PASO 4: Obtener newsletters de la BDD
    const newsletters = await obtenerNewslettersBDD();

    // PASO 5: Comparar noticia con newsletters
    const newslettersRelacionados = compararConNewslettersLocal(resumen, newsletters);

    // PASO 6: Preparar respuesta final
    let mensaje = `‚úÖ Esta noticia S√ç est√° relacionada con Climatech.

üì∞ T√≠tulo: ${titulo}
üìù Resumen: ${resumen}

`;

    if (newslettersRelacionados.length > 0) {
      mensaje += `üìß Newsletters relacionados encontrados:
`;
      newslettersRelacionados.forEach((nl, index) => {
        mensaje += `${index + 1}. ${nl.titulo} (puntuaci√≥n: ${nl.puntuacion})
`;
      });
    } else {
      mensaje += `‚ö†Ô∏è No se encontraron newsletters con tem√°tica similar en la base de datos.`;
    }

    return mensaje;

  } catch (error) {
    console.error(`‚ùå Error en an√°lisis completo: ${error.message}`);
    return `‚ùå Error durante el an√°lisis: ${error.message}`;
  }
}

// Funci√≥n para analizar noticia y devolver estructura para API
export async function analizarNoticiaEstructurada(input) {
  try {
    let contenido, titulo, url = '';
    if (input.startsWith('http')) {
      const resultadoExtraccion = await extraerContenidoNoticia(input);
      contenido = resultadoExtraccion.contenido;
      titulo = resultadoExtraccion.titulo;
      url = input;
    } else {
      contenido = input;
      titulo = 'Texto proporcionado';
    }

    const resumen = generarResumenLocal(contenido);
    const esClimatech = determinarSiEsClimatechLocal(contenido);
    let newsletters = [];
    let relacionados = [];
    if (esClimatech) {
      newsletters = await obtenerNewslettersBDD();
      relacionados = compararConNewslettersLocal(resumen, newsletters);
    }

    return {
      esClimatech,
      titulo,
      resumen: esClimatech ? resumen : null,
      url,
      newslettersRelacionados: relacionados.map(nl => ({
        id: nl.id,
        titulo: nl.titulo,
        Resumen: nl.Resumen || '',
        link: nl.link || '',
        puntuacion: nl.puntuacion || 0,
      })),
    };
  } catch (error) {
    return {
      esClimatech: false,
      titulo: 'Error',
      resumen: null,
      url: '',
      newslettersRelacionados: [],
      error: error.message || String(error),
    };
  }
}

// Funci√≥n para manejar el chat interactivo
async function empezarChat() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  const mensajeBienvenida = `
üå± CLIMATECH NEWS ANALYZER (SIN LLM)
=====================================

Soy un asistente especializado en analizar noticias sobre Climatech.
Esta versi√≥n funciona completamente sin LLM, usando an√°lisis de texto local.

üìã Mi proceso:
1. Extraigo el contenido de la noticia desde el link
2. Genero un resumen usando an√°lisis de texto local
3. Determino si es Climatech usando palabras clave
4. Si es Climatech, busco newsletters relacionados en la base de datos
5. Te muestro los resultados

üîó Para empezar, pega el link de una noticia.
üí° Tambi√©n puedes escribir 'exit' para salir.

¬øQu√© noticia quieres analizar?
`;

  console.log(mensajeBienvenida);

  const pregunta = () => {
    rl.question('> ', async (input) => {
      if (input.toLowerCase() === 'exit') {
        console.log('üëã ¬°Hasta luego!');
        rl.close();
        return;
      }

      if (input.trim() === '') {
        console.log('üí° Por favor, ingresa un link de noticia o texto para analizar.');
        pregunta();
        return;
      }

      try {
        const resultado = await analizarNoticia(input);
        console.log('\n' + resultado + '\n');
      } catch (error) {
        console.log(`‚ùå Error procesando la solicitud: ${error.message}`);
        console.log('üí° Intenta con otro link o escribe "exit" para salir.\n');
      }

      pregunta();
    });
  };

  pregunta();
}

// Iniciar el chat
const isDirectRun = (() => {
  try {
    const thisFile = fileURLToPath(import.meta.url);
    return process.argv[1] && (process.argv[1] === thisFile || process.argv[1].endsWith('main.js'));
  } catch {
    return false;
  }
})();

if (isDirectRun) {
  empezarChat();
}


